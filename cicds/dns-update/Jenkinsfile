label='jk-worker-pod'
podTemplate(
    label: label,
    containers: [
        containerTemplate(
            name: 'jnlp',
            
            image: 'ghcr.io/gasilva-clgx/jnlp-slave:1.0.1',
            //runAsUser: 'root',
            workingDir: '/home/jenkins',
            resourceRequestCpu: '100m',
            resourceLimitCpu: '2000m',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
        )
    ],
    volumes: [
        //hostPathVolume(hostPath: '/usr/bin/docker', mountPath: '/usr/bin/docker'),
        //hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')
    ]
) {
    node(label) {
        
        stage('Initialize values'){
            checkout scm
            
            withCredentials([string(credentialsId: 'vault_token', variable: 'VAULT_TOKEN')]) {
                
                def data = readYaml(text: sh(returnStdout: true, script: "vault kv get --format yaml  kv/root_users/piter"))
                
                remote = [:]     
                remote.name = 'piter'
                remote.host = 'piter.psilva.org'
                remote.allowAnyHosts = true
                remote.fileTransfer = 'scp'
                remote.user = data.data.data.user
                remote.password = data.data.data.pass
                
                newRecords = readYaml(file: "dns/internal.yaml")
            }
        }
        
        parallel Adguard: {
            
            stage('Update Adguard') {
            
            sshGet remote: remote, from: '/home/pi/adguardhome/conf/AdGuardHome.yaml', into: './AdGuardHome.yaml', override: true     
            
            def oldRecords = readYaml(file: "./AdGuardHome.yaml")
            oldRecords.dns.rewrites = newRecords.rewrites

            sh 'rm ./AdGuardHome.yaml'
            writeYaml charset: 'utf-8', data: oldRecords, file: './AdGuardHome.yaml'
            sshCommand remote: remote, command: 'chown pi /home/pi/adguardhome/conf/AdGuardHome.yaml', sudo: true
            sshPut remote: remote, from: './AdGuardHome.yaml', into: '/home/pi/adguardhome/conf/AdGuardHome.yaml'
            sshCommand remote: remote, command: "docker restart adguardhome"
            

        }
            
    }, Pihole: {
            
            stage('Update Pihole') {
            
            def piRecords = ""
            for(def rec : newRecords.rewrites){
                piRecords += "${rec['answer']} ${rec['domain']}\n"
            }
                
            print piRecords
            writeFile encoding: 'utf-8', file: 'custom.list', text: piRecords

            sshPut remote: remote, from: './custom.list', into: '/home/pi/pihole/etc-pihole/custom.list'
            sshCommand remote: remote, command: "docker restart pihole"
            

        }
    },
    failFast: false
        
    }
}

